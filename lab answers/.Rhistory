swipeable = TRUE,
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
library(shiny)
library(shinyMobile)
ui <- f7Page(
title = "My App",
options = list(theme = "ios"),
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
swipeable = TRUE,
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
library(shiny)
library(shinyMobile)
ui <- f7Page(
title = "My App",
options = list(theme = "ios"),
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
server <- function(input, output, session) {
observeEvent(input$open_panel, {
updateF7Panel("sidepanel", session = session, open = TRUE)
})
}
library(shiny)
library(shinyMobile)
ui <- f7Page(
title = "My App",
options = list(theme = "ios"),
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
server = function(input, output, session) {
observeEvent(input$open_panel, {
updateF7Panel("sidepanel", session = session, open = TRUE)
})
}
library(shiny)
library(shinyMobile)
ui = shinyApp(
title = "My App",
options = list(theme = "ios"),
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
library(shiny)
library(shinyMobile)
ui = shinyApp(
title = "My App",
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
help("f7PanelMenu")
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
library(shiny); runApp('Player_Performance_Lab.R')
setwd("..")
knitr::opts_chunk$set(echo = TRUE)
library(tree)
getwd()
setwd("../../..")
setwd("American University/Stat 627")
setwd("lab answers")
install.packages("tree")
library(tree)
load("../data/Auto-3.rda")
attach(Auto)
tree.mpg <- tree(mpg ~ .-name-origin + as.factor(origin), Auto)
tree.mpg
plot(tree.mpg, type = "uniform"); text(tree.mpg)
summary(tree.mpg)
ECO = ifelse(mpg > median(mpg), "Economy", "Consuming")
Auto$ECO = ifelse(mpg > median(mpg), "Economy", "Consuming")
table(Auto$ECO)
glimpse(Auto)
glimpse(Auto)
library(tidyverse)
glimpse(Auto)
Auto$ECO <- as.factor(Auto$ECO)
glimpse(Auto)
tree(ECO ~ .-name, cars)
tree(ECO ~ .-name, Auto)
tree_model <- tree(ECO ~ .-name -mpg, Auto)
plot(tree_model, type = "uniform")
summary(tree_model)
set.seed(123)
train_indices <- sample(1:nrow(Auto), nrow(Auto)/2)
train_data <- Auto[train_indices, ]
test_data <- Auto[-train_indices, ]
tree_preds <- predict(tree_model2, newdata= test_data, type = "class")
tree_model2 <- tree(ECO ~ . -name - mpg, data = train_data)
tree_preds <- predict(tree_model2, newdata= test_data, type = "class")
help("cv.tree")
train_model <- tree(ECO ~ . -name - mpg, data = train_data)
cv_results <- c.tree(train_model, FUN=prune.misclass)
cv_results <- cv.tree(train_model, FUN=prune.misclass)
cv.tree(tree_model)
train_model <- tree(ECO ~ . -name - mpg, data = train_data)
test_preds <- predict(train_model, newdata= test_data, type = "class")
conf_mat <- table(Predicted = test_preds, Actual = test_data$ECO)
conf_mat
accuracy <- sum(diag(conf_mat)) / sum(conf_mat)
accuracy
cv$size[which.min(cv$dev)]
cv <- cv.tree(tree_model)
cv
cv$size[which.min(cv$dev)]
plot(cv)
help("cv.tree")
cv_m <- cv.tree(train_model, FUN = prune.misclass)
cv_m
plot(cv_m)
cv$size[which.min(cv$dev)]
cv_m$size[which.min(cv$dev)]
opt_m <- prune.misclass(train_model, best = 9)
opt_m
plot(opt_m)
text(opt_m)
opt_m <- prune.misclass(train_model, best = 9)
plot(opt_m)
text(opt_m)
knitr::opts_chunk$set(echo = TRUE)
library(tree)
library(tidyverse)
load("../data/Auto-3.rda")
Auto$ECO = ifelse(mpg > median(mpg), "Economy", "Consuming")
glimpse(Auto)
Auto$ECO <- ifelse(mpg > median(mpg), "Economy", "Consuming")
install.packages("randomForest")
library(randomForest)
library(tidyverse)
load("../data/Auto-3.rda")
attach(Auto)
randomForest(Auto)
glimpse(Auto)
randomForest(Auto[-name])
Auto <- Auto%>%
select(-name)
glimpse(Auto)
randomForest(Auto[-name])
randomForest(Auto)
help("importance")
rf <- randomForest(Auto)
rf
importance(rf)
varImpPlot(rf)
Auto$ECO <- ifelse(mpg > median(mpg), "Economy", "Consuming")
Auto$ECO <- ifelse(mpg > median(mpg), "Economy", "Consuming")
rf <- randomForest(ECO ~ ., data = Auto)
glimpse(Auto)
Auto$ECO <- as.factor(Auto$ECO)
rf <- randomForest(ECO ~ ., data = Auto)
rf
importance(rf)
varImpPlot(rf)
set.seed(123)
train_index <- sample(1:nrow(Auto), 200)
train_data <- Auto[train_index, ]
test_data <- Auto[-train_index, ]
rf_model <- randomForest(ECO ~ . , data = train_data)
preds <- predict(rf_model, newdata = test_data)
mse <- mean((preds - test_data$ECO)^2)
rf <- randomForest(mpg ~ ., data = Auto)
rf
importance(rf)
varImpPlot(rf)
load("../data/Auto-3.rda")
attach(Auto)
glimpse(Auto)
Auto <- Auto%>%
select(-name)
rf <- randomForest(mpg ~ ., data = Auto)
rf
importance(rf)
varImpPlot(rf)
set.seed(123)
train_index <- sample(1:nrow(Auto), 200)
train_data <- Auto[train_index, ]
test_data <- Auto[-train_index, ]
rf_model <- randomForest(mpg ~ . , data = train_data)
preds <- predict(rf_model, newdata = test_data)
mse <- mean((preds - test_data$mpg)^2)
mse
rf_model
which.min(rf$mse)
plot(rf)
help("randomForest")
glimpse(Auto)
p <- length(Auto) - 1
RF <- OptimalTrees <- Yhat <- RMSEP <- vector(mode = "double", length = p)
p <- length(Auto) - 1
RF <- OptimalTrees <- Yhat <- RMSEP <- vector(mode = "double", length = p)
set.seed(123)
for (k in 1:p) {
rf <- randomForest(mpg ~., data = train_data)
OptimalTrees[k] <- which.min(rf$mse)
rf <- randomForest(mpg ~ ., data = train_data, mtry = k, ntree = OptimalTrees[k])
Yhat <- predict(rf, newdata = test_data)
RMSEP[k] <- sqrt(mean((Yhat - test_data$mpg)^2))
}
plot(OptimalTrees)
plot(RMSEP)
which.min(RMSEP)
RMSEP[3]
OptimalTrees[3]
RF <- randomForest(mpg ~ . , data = Auto, mtry = 7, ntree =415, which.min(RF$mse))
RF <- randomForest(mpg ~ ., data = Auto, mtry = 7,
ntree = which.min(rf$mse))
rf
knitr::opts_chunk$set(echo = TRUE)
Y <- 1
lambda <- 2
Y <- 1
lambda <- 2
beta <- seq(-3, 3, length = 100)
beta
beta <- seq(-3, 3, length = 100)
RSS <- (Y - beta)^2
ridge_obj <- RSS + lambda * beta^2
lasso_obj <- RSS + lambda * abs(beta)
plot(beta, ridge_obj, type = "l", col = "blue", ylab = "Objective", main = "Ridge vs Lasso")
lines(beta, lasso_obj, col = "red")
legend("topright", legend = c("Ridge", "Lasso"), col = c("blue", "red"), lty = 1)
beta_ridge <- Y / (1 + lambda)           # 1 / (1 + 2) = 0.333
beta_lasso <- if (Y > lambda / 2) Y - lambda / 2 else if (Y < -lambda / 2) Y + lambda / 2 else 0
beta_ridge
beta_lasso
lambda_vals <- seq(0.01, 10, length = 100)
beta_ridge <- Y / (1 + lambda_vals)
beta_lasso <- ifelse(Y > lambda_vals / 2, Y - lambda_vals / 2,
ifelse(Y < -lambda_vals / 2, Y + lambda_vals / 2, 0))
plot(lambda_vals, beta_ridge, type = "l", col = "blue", ylim = c(0,1),
ylab = "Estimated Coefficient", xlab = "Lambda", main = "Ridge vs Lasso Estimates")
lines(lambda_vals, beta_lasso, col = "red")
legend("topright", legend = c("Ridge", "Lasso"), col = c("blue", "red"), lty = 1)
help("rnorm")
x <- rnorm(100)
x
set.seed(1234)
x <- rnorm(100)
error <- rnorm(100)
x_poly <- data.frame(poly(x,10, raw = T))
View(x_poly)
data <- data.frame(Y, x_poly)
library(leaps)
x_poly <- data.frame(poly(x,10, raw = T))
data <- data.frame(Y, x_poly)
best_fit <- regsubsets(Y ~., data = data, nvmax = 10)
summary(best_fit)
best_fit
best_fit$cp
summary_best_fit <- summary(best_fit)
summary_best_fit$cp
summary_best_fit$bic
View(data)
plot(summary_best_fit$cp)
library(leaps)
X_poly <- data.frame(poly(X, 10, raw = TRUE))  # X, X^2, ..., X^10
library(leaps)
X_poly <- data.frame(poly(x, 10, raw = TRUE))  # X, X^2, ..., X^10
data <- data.frame(Y, X_poly)
best_fit <- regsubsets(Y ~ ., data = data, nvmax = 10)
summary_best <- summary(best_fit)
plot(summary_best$cp, xlab = "Number of Predictors", ylab = "Cp", type = "l")
library(leaps)
X_poly <- data.frame(poly(x, 10, raw = TRUE))  # X, X^2, ..., X^10
data <- data.frame(Y, X_poly)
best_fit <- regsubsets(Y ~ ., data = data, nvmax = 10)
summary_best <- summary(best_fit)
plot(summary_best$cp, xlab = "Number of Predictors", ylab = "Cp", type = "l")
set.seed(1234)
x <- rnorm(100)
error <- rnorm(100)
beta0 <- 1
beta1 <- 2
beta2 <- 3
beta3 <- 4
Y <- beta0 + beta1*X + beta2*X^2 + beta3*X^3 + error
beta0 <- 1
beta1 <- 2
beta2 <- 3
beta3 <- 4
Y <- beta0 + beta1*x + beta2*x^2 + beta3*x^3 + error
library(leaps)
x_poly <- data.frame(poly(x,10, raw = T))
data <- data.frame(Y, x_poly)
best_fit <- regsubsets(Y ~., data = data, nvmax = 10)
summary_best_fit <- summary(best_fit)
plot(summary_best_fit$cp)
summary_best_fit$bic
summary_best_fit$bic
plot(summary_best_fit$cp)
library(leaps)
x_poly <- data.frame(poly(x,10, raw = T))
data <- data.frame(Y, x_poly)
best_fit <- regsubsets(Y ~., data = data, nvmax = 10)
summary_best_fit <- summary(best_fit)
plot(summary_best_fit$cp)
plot(summary_best_fit$bic)
plot(summary_best_fit$adjr2)
fwd <- regsubsets(Y ~., data=data, nvmax = 10, method = "forward")
bwd <- regsubsets(Y ~., data=data, nvmax = 10, method = "backward")
fwd
bwd
summary(fwd)
best_fit <- regsubsets(Y ~., data=data, nvmax = 10, method = "forward")
summary_best_fit <- summary(best_fit)
plot(summary_best_fit$cp)
plot(summary_best_fit$bic)
plot(summary_best_fit$adjr2)
best_fit <- regsubsets(Y ~., data=data, nvmax = 10, method = "backward")
summary_best_fit <- summary(best_fit)
plot(summary_best_fit$cp)
plot(summary_best_fit$bic)
plot(summary_best_fit$adjr2)
library(glmnet)
X_matrix <- model.matrix(Y ~ ., data = data)[, -1]
cv_lasso <- cv.glmnet(X_matrix, Y, alpha = 1)
plot(cv_lasso)
coef(cv_lasso, s = "lambda.min")
coef(cv_lasso, s = "lambda.min")
plot(cv_lasso)
coef(cv_lasso, s = "lambda.min")
load("../College.rda")
load("../data/College.rda")
glimspe(College)
library(tidyverse)
glimspe(College)
glimspe(College)
glimpse(College)
load("../data/College.rda")
library(ISLR)
library(tidyverse)
set.seed(123)
train <- sample(1:nrow(College), nrow(College)/2)
test <- setdiff(1:nrow(College), train)
lm_fit <- lm(Apps ~ ., data = College, subset = train)
pred_lm <- predict(lm_fit, newdata = College[test, ])
mean((pred_lm - test_y)^2)
load("../data/College.rda")
library(ISLR)
library(tidyverse)
set.seed(123)
train <- sample(1:nrow(College), nrow(College)/2)
test <- setdiff(1:nrow(College), train)
test_y <- College$Apps[test]
lm_fit <- lm(Apps ~ ., data = College, subset = train)
pred_lm <- predict(lm_fit, newdata = College[test, ])
mean((pred_lm - test_y)^2)
ridge_fit <- cv.glmnet(train_x, train_y, alpha = 0)
load("../data/College.rda")
library(ISLR)
library(tidyverse)
set.seed(1)
train <- sample(1:nrow(College), nrow(College)/2)
test <- setdiff(1:nrow(College), train)
train_x <- model.matrix(Apps ~ ., data = College)[train, -1]
test_x <- model.matrix(Apps ~ ., data = College)[test, -1]
train_y <- College$Apps[train]
test_y <- College$Apps[test]
lm_fit <- lm(Apps ~ ., data = College, subset = train)
pred_lm <- predict(lm_fit, newdata = College[test, ])
mean((pred_lm - test_y)^2)
lm_fit <- lm(Apps ~ ., data = College, subset = train)
pred_lm <- predict(lm_fit, newdata = College[test, ])
mean((pred_lm - test_y)^2)
load("../data/College.rda")
library(ISLR)
library(tidyverse)
set.seed(1234)
train <- sample(1:nrow(College), nrow(College)/2)
test <- setdiff(1:nrow(College), train)
train_x <- model.matrix(Apps ~ ., data = College)[train, -1]
test_x <- model.matrix(Apps ~ ., data = College)[test, -1]
train_y <- College$Apps[train]
test_y <- College$Apps[test]
lm_fit <- lm(Apps ~ ., data = College, subset = train)
pred_lm <- predict(lm_fit, newdata = College[test, ])
mean((pred_lm - test_y)^2)
ridge_fit <- cv.glmnet(train_x, train_y, alpha = 0)
ridge_pred <- predict(ridge_fit, s = ridge_fit$lambda.min, newx = test_x)
mean((ridge_pred - test_y)^2)
lasso_fit <- cv.glmnet(train_x, train_y, alpha = 1)
lasso_pred <- predict(lasso_fit, s = lasso_fit$lambda.min, newx = test_x)
mean((lasso_pred - test_y)^2)
library(pls)
pcr_fit <- pcr(Apps ~ ., data = College, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr_fit, val.type = "MSEP")
pcr_pred <- predict(pcr_fit, newdata = College[test, ], ncomp = 10)
mean((pcr_pred - test_y)^2)
library(pls)
pcr_fit <- pcr(Apps ~ ., data = College, subset = train, scale = TRUE, validation = "CV")
pcr_pred <- predict(pcr_fit, newdata = College[test, ], ncomp = 10)
mean((pcr_pred - test_y)^2)
pls_fit <- plsr(Apps ~ ., data = College, subset = train, scale = TRUE, validation = "CV")
validationplot(pls_fit, val.type = "MSEP")
pls_pred <- predict(pls_fit, newdata = College[test, ], ncomp = 10)
mean((pls_pred - test_y)^2)
library(pls)
pcr_fit <- pcr(Apps ~ ., data = College, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr_fit, val.type = "MSEP")
pcr_pred <- predict(pcr_fit, newdata = College[test, ], ncomp = 10)
mean((pcr_pred - test_y)^2)
Y <- beta0 + 7 * x^7 + error
data2 <- data.frame(Y, poly(x, 10, raw = TRUE))
best_fit2 <- regsubsets(Y ~ ., data = data2, nvmax = 10)
summary_best2 <- summary(best_fit2)
X_matrix2 <- model.matrix(Y ~ ., data = data2)[, -1]
cv_lasso2 <- cv.glmnet(X_matrix2, Y, alpha = 1)
plot(cv_lasso2)
coef(cv_lasso2, s = "lambda.min")
